{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nfunction AiPlayerComponent_p_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"p\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", !ctx_r0.getChange());\n  }\n}\nexport class AiPlayerComponent {\n  constructor() {\n    this.aiMove = new EventEmitter();\n    this.boardLength = 0;\n    this.aiPlay = '';\n    this.move = NaN;\n    this.winningComb = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6] // 7\n    ];\n  }\n\n  ngOnInit() {}\n  getChange() {\n    let toReturn = false;\n    let count = 0;\n    if (this.aiPlay === this.game.player.choice) {\n      this.aiPlay = '';\n    }\n    if (this.aiPlay === '') {\n      if (this.game.player.choice === 'x') {\n        this.aiPlay = 'circle';\n      } else {\n        this.aiPlay = 'x';\n      }\n    }\n    if (this.game.player.choice === 'x' || this.getMarksCount() > 0) {\n      count = this.getMarksCount();\n    } else {\n      count = 1;\n    }\n    if (count !== this.boardLength && count > 0 && this.game.currentPlay === this.aiPlay) {\n      this.boardLength = count;\n      setTimeout(() => {\n        this.move = this.bestMove();\n        if (!Number.isNaN(Number(this.move))) {\n          this.aiMove.emit(this.move);\n          this.move = NaN;\n          toReturn = true;\n        }\n      }, 500);\n    }\n    return toReturn;\n  }\n  getMarksCount() {\n    let toReturn = 0;\n    this.game.board.forEach(b => {\n      if (b !== '') {\n        toReturn++;\n      }\n    });\n    return toReturn;\n  }\n  bestMove() {\n    let toReturn = NaN; // Index in the board of the best posible move;\n    let bestScore; // The score for a move.\n    if (this.aiPlay === 'circle') {\n      bestScore = Infinity;\n    } else {\n      bestScore = -Infinity;\n    }\n    for (let i = 0; i < this.game.board.length; i++) {\n      if (this.game.board[i] === '') {\n        this.game.board[i] = this.aiPlay;\n        // AI has made his first move, next line will check if is the best.\n        if (this.aiPlay === 'circle') {\n          let s = this.minimax(0, true);\n          this.game.board[i] = '';\n          if (s < bestScore) {\n            bestScore = s;\n            toReturn = i;\n          }\n        } else {\n          let s = this.minimax(0, false);\n          this.game.board[i] = '';\n          if (s > bestScore) {\n            bestScore = s;\n            toReturn = i;\n          }\n        }\n      }\n    }\n    return toReturn;\n    // To write a random move in the board.\n    // let toReturn: number = Math.floor(Math.random() * 9 );\n    // if (this.board[toReturn] !== '') {\n    //   toReturn = this.bestMove();\n    // }\n  }\n\n  checkWin() {\n    let toReturn = NaN;\n    let options = ['x', 'circle'];\n    options.forEach(element => {\n      if (this.winningComb.some(combination => {\n        return combination.every(i => {\n          return this.game.board[i] === element;\n        });\n      })) {\n        if (element === 'x') {\n          toReturn = 10;\n        }\n        if (element === 'circle') {\n          toReturn = -10;\n        }\n      }\n    });\n    if (Number.isNaN(Number(toReturn)) && this.game.board.every(c => c === 'x' || c === 'circle')) {\n      toReturn = 0;\n    }\n    return toReturn;\n  }\n  minimax(depth, isMaximizing) {\n    let score = this.checkWin();\n    if (!Number.isNaN(Number(score))) {\n      return score;\n    }\n    let best;\n    let choice;\n    if (isMaximizing) {\n      best = -Infinity;\n      choice = 'x';\n    } else {\n      best = Infinity;\n      choice = 'circle';\n    }\n    for (let i = 0; i < this.game.board.length; i++) {\n      if (this.game.board[i] === '') {\n        this.game.board[i] = choice;\n        let s = this.minimax(depth + 1, !isMaximizing);\n        this.game.board[i] = '';\n        if (choice === 'x') {\n          best = Math.max(s, best);\n        } else {\n          best = Math.min(s, best);\n        }\n      }\n    }\n    return best;\n  }\n  static #_ = this.ɵfac = function AiPlayerComponent_Factory(t) {\n    return new (t || AiPlayerComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AiPlayerComponent,\n    selectors: [[\"app-ai-player\"]],\n    inputs: {\n      game: \"game\"\n    },\n    outputs: {\n      aiMove: \"aiMove\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"hidden\", 4, \"ngIf\"], [3, \"hidden\"]],\n    template: function AiPlayerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AiPlayerComponent_p_0_Template, 1, 1, \"p\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.game == null ? null : ctx.game.player == null ? null : ctx.game.player.choice);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","i0","ɵɵelement","ɵɵproperty","ctx_r0","getChange","AiPlayerComponent","constructor","aiMove","boardLength","aiPlay","move","NaN","winningComb","ngOnInit","toReturn","count","game","player","choice","getMarksCount","currentPlay","setTimeout","bestMove","Number","isNaN","emit","board","forEach","b","bestScore","Infinity","i","length","s","minimax","checkWin","options","element","some","combination","every","c","depth","isMaximizing","score","best","Math","max","min","_","_2","selectors","inputs","outputs","decls","vars","consts","template","AiPlayerComponent_Template","rf","ctx","ɵɵtemplate","AiPlayerComponent_p_0_Template"],"sources":["/Volumes/Data/code/Cat-s-Game/src/app/ai-player/ai-player.component.ts","/Volumes/Data/code/Cat-s-Game/src/app/ai-player/ai-player.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Game } from '../models/game';\n\n@Component({\n  selector: 'app-ai-player',\n  templateUrl: './ai-player.component.html',\n  styleUrls: ['./ai-player.component.scss']\n})\nexport class AiPlayerComponent implements OnInit {\n\n  @Input() game!: Game;\n  @Output() aiMove: EventEmitter<number> = new EventEmitter();\n\n  public boardLength: number = 0;\n  public aiPlay: string = '';\n  public move: number = NaN;\n  private winningComb: number[][] = [\n    [0, 1, 2], // 0\n    [3, 4, 5], // 1\n    [6, 7, 8], // 2\n    [0, 3, 6], // 3\n    [1, 4, 7], // 4\n    [2, 5, 8], // 5\n    [0, 4, 8], // 6\n    [2, 4, 6]  // 7\n  ];\n  constructor() { }\n\n  public ngOnInit(): void {}\n\n  public getChange(): boolean {\n\n    let toReturn: boolean = false;\n\n    let count: number = 0;\n\n    if (this.aiPlay === this.game.player.choice) {\n      this.aiPlay = '';\n    }\n\n    if (this.aiPlay === '') {\n\n      if (this.game.player.choice === 'x') {\n        this.aiPlay = 'circle';\n      } else {\n        this.aiPlay = 'x';\n      }\n    }\n\n    if (this.game.player.choice === 'x' ||\n        this.getMarksCount() > 0) {\n      count = this.getMarksCount();\n    } else {\n      count = 1;\n    }\n\n    if (count !== this.boardLength &&\n        count > 0 &&\n        this.game.currentPlay === this.aiPlay) {\n\n      this.boardLength = count;\n\n      setTimeout((): void => { // AI Turn! =>\n        this.move = this.bestMove();\n        if (!Number.isNaN(Number(this.move))) {\n          this.aiMove.emit(this.move);\n          this.move = NaN;\n          toReturn = true;\n        }\n      }, 500);\n    }\n\n    return toReturn;\n  }\n\n  private getMarksCount(): number {\n    let toReturn: number = 0;\n    this.game.board.forEach(\n      (b): void => {\n        if (b !== '') {\n          toReturn++;\n        }\n      }\n    );\n    return toReturn;\n  }\n\n  private bestMove(): number {\n\n    let toReturn: number = NaN; // Index in the board of the best posible move;\n    let bestScore: number; // The score for a move.\n\n    if (this.aiPlay === 'circle') {\n      bestScore = Infinity;\n    } else {\n      bestScore = -Infinity;\n    }\n\n    for (let i: number = 0; i < this.game.board.length; i++) {\n      if (this.game.board[i] === '') {\n        this.game.board[i] = this.aiPlay;\n        // AI has made his first move, next line will check if is the best.\n        if (this.aiPlay === 'circle') {\n          let s: number = this.minimax(0 , true);\n          this.game.board[i] = '';\n          if (s < bestScore) {\n            bestScore = s;\n            toReturn = i;\n          }\n        } else {\n          let s: number = this.minimax(0 , false);\n          this.game.board[i] = '';\n          if (s > bestScore) {\n            bestScore = s;\n            toReturn = i;\n          }\n        }\n      }\n    }\n\n    return toReturn;\n\n    // To write a random move in the board.\n    // let toReturn: number = Math.floor(Math.random() * 9 );\n    // if (this.board[toReturn] !== '') {\n    //   toReturn = this.bestMove();\n    // }\n  }\n\n  private checkWin(): number {\n\n    let toReturn: number = NaN;\n\n    let options: string[] = ['x', 'circle'];\n\n    options.forEach((element): void => {\n      if (this.winningComb\n              .some((combination): boolean => {\n                return combination.every((i): boolean => {\n                  return this.game.board[i] === element;\n                })})) {\n        if (element === 'x') {\n          toReturn = 10;\n        }\n        if (element === 'circle') {\n          toReturn = -10;\n        }\n      }\n    });\n\n    if (Number.isNaN(Number(toReturn)) &&\n        this.game\n            .board\n            .every(c => c === 'x' || c === 'circle')) {\n      toReturn = 0;\n    }\n\n    return toReturn;\n  }\n\n  private minimax(depth: number, isMaximizing: boolean): number {\n\n    let score: number = this.checkWin();\n\n    if (!Number.isNaN(Number(score))) {\n      return score;\n    }\n\n    let best: number;\n    let choice: string;\n\n    if (isMaximizing) {\n      best = -Infinity;\n      choice = 'x';\n    } else {\n      best = Infinity;\n      choice = 'circle';\n    }\n\n    for (let i: number = 0; i < this.game.board.length; i++) {\n      if (this.game.board[i] === '') {\n        this.game.board[i] = choice;\n        let s: number = this.minimax(depth + 1, !isMaximizing);\n        this.game.board[i] = '';\n        if (choice === 'x') {\n          best = Math.max(s, best);\n        } else {\n          best = Math.min(s, best);\n        }\n      }\n    }\n\n    return best;\n  }\n\n}\n","<p *ngIf=\"game?.player?.choice\" [hidden]=\"!getChange()\">\n  <!-- Move detected!!! -->\n</p>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}