{"ast":null,"code":"import { formatCurrency } from '@angular/common';\nimport { LOCALE_ID } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class StringService {\n  constructor(locale) {\n    this.locale = locale;\n  }\n  capitalize(value) {\n    let capitalized = value;\n    if (value?.length > 0) {\n      capitalized = value.charAt(0).toUpperCase();\n      if (value.length > 1) {\n        capitalized += value.substring(1).toLowerCase();\n      }\n    }\n    return capitalized;\n  }\n  appendSeparated(original, additional, separator) {\n    let separated = '';\n    if (additional) {\n      if (!original) {\n        separated = '';\n      } else if (original.length > 0) {\n        if (separator === undefined) {\n          separator = ',';\n        }\n        separated = original + separator;\n      }\n      separated += additional;\n    } else {\n      separated = original;\n    }\n    return separated;\n  }\n  currency(value) {\n    return formatCurrency(value, this.locale, '$');\n  }\n  static #_ = this.ɵfac = function StringService_Factory(t) {\n    return new (t || StringService)(i0.ɵɵinject(LOCALE_ID));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StringService,\n    factory: StringService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["formatCurrency","LOCALE_ID","StringService","constructor","locale","capitalize","value","capitalized","length","charAt","toUpperCase","substring","toLowerCase","appendSeparated","original","additional","separator","separated","undefined","currency","_","i0","ɵɵinject","_2","factory","ɵfac","providedIn"],"sources":["/Volumes/Data/code/Cat-s-Game/src/app/service/string.service.ts"],"sourcesContent":["import { formatCurrency } from '@angular/common';\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StringService {\n\n  constructor(@Inject(LOCALE_ID) public locale: string) { }\n\n  public capitalize(value: string): string {\n\n    let capitalized: string = value;\n\n    if (value?.length > 0) {\n      capitalized = value.charAt(0).toUpperCase();\n\n      if (value.length > 1) {\n        capitalized += value.substring(1).toLowerCase();\n      }\n    }\n\n    return capitalized;\n  }\n\n  public appendSeparated(original: string,\n                         additional: string,\n                         separator: string): string {\n    let separated: string = '';\n\n    if (additional) {\n\n      if (!original) {\n        separated = '';\n      } else if (original.length > 0) {\n\n        if (separator === undefined) {\n          separator = ',';\n        }\n\n        separated = original + separator;\n      }\n\n      separated += additional;\n    } else {\n      separated = original;\n    }\n\n    return separated;\n  }\n\n  public currency(value: number): string {\n    return formatCurrency(value, this.locale, '$');\n  }\n\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,SAA6BC,SAAS,QAAQ,eAAe;;AAK7D,OAAM,MAAOC,aAAa;EAExBC,YAAsCC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAY;EAEjDC,UAAUA,CAACC,KAAa;IAE7B,IAAIC,WAAW,GAAWD,KAAK;IAE/B,IAAIA,KAAK,EAAEE,MAAM,GAAG,CAAC,EAAE;MACrBD,WAAW,GAAGD,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;MAE3C,IAAIJ,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;QACpBD,WAAW,IAAID,KAAK,CAACK,SAAS,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;;;IAInD,OAAOL,WAAW;EACpB;EAEOM,eAAeA,CAACC,QAAgB,EAChBC,UAAkB,EAClBC,SAAiB;IACtC,IAAIC,SAAS,GAAW,EAAE;IAE1B,IAAIF,UAAU,EAAE;MAEd,IAAI,CAACD,QAAQ,EAAE;QACbG,SAAS,GAAG,EAAE;OACf,MAAM,IAAIH,QAAQ,CAACN,MAAM,GAAG,CAAC,EAAE;QAE9B,IAAIQ,SAAS,KAAKE,SAAS,EAAE;UAC3BF,SAAS,GAAG,GAAG;;QAGjBC,SAAS,GAAGH,QAAQ,GAAGE,SAAS;;MAGlCC,SAAS,IAAIF,UAAU;KACxB,MAAM;MACLE,SAAS,GAAGH,QAAQ;;IAGtB,OAAOG,SAAS;EAClB;EAEOE,QAAQA,CAACb,KAAa;IAC3B,OAAON,cAAc,CAACM,KAAK,EAAE,IAAI,CAACF,MAAM,EAAE,GAAG,CAAC;EAChD;EAAC,QAAAgB,CAAA,G;qBA/CUlB,aAAa,EAAAmB,EAAA,CAAAC,QAAA,CAEJrB,SAAS;EAAA;EAAA,QAAAsB,EAAA,G;WAFlBrB,aAAa;IAAAsB,OAAA,EAAbtB,aAAa,CAAAuB,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}